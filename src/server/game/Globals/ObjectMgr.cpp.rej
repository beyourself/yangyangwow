***************
*** 2337,2343 ****
          itemTemplate.Name1                     = fields[4].GetString();
          itemTemplate.DisplayInfoID             = fields[5].GetUInt32();
          itemTemplate.Quality                   = uint32(fields[6].GetUInt8());
-         itemTemplate.Flags                     = uint32(fields[7].GetInt64());
          itemTemplate.Flags2                    = fields[8].GetUInt32();
          itemTemplate.BuyCount                  = uint32(fields[9].GetUInt8());
          itemTemplate.BuyPrice                  = int32(fields[10].GetInt64());
--- 2337,2343 ----
          itemTemplate.Name1                     = fields[4].GetString();
          itemTemplate.DisplayInfoID             = fields[5].GetUInt32();
          itemTemplate.Quality                   = uint32(fields[6].GetUInt8());
+         itemTemplate.Flags                     = uint32(fields[7].GetUInt32());
          itemTemplate.Flags2                    = fields[8].GetUInt32();
          itemTemplate.BuyCount                  = uint32(fields[9].GetUInt8());
          itemTemplate.BuyPrice                  = int32(fields[10].GetInt64());
***************
*** 3393,3399 ****
          uint32 oldMSTime = getMSTime();
  
          std::string tableName = sWorld->getBoolConfig(CONFIG_START_ALL_SPELLS) ? "playercreateinfo_spell_custom" : "playercreateinfo_spell";
-         QueryResult result = WorldDatabase.PQuery("SELECT race, class, Spell FROM %s", tableName.c_str());
  
          if (!result)
          {
--- 3393,3399 ----
          uint32 oldMSTime = getMSTime();
  
          std::string tableName = sWorld->getBoolConfig(CONFIG_START_ALL_SPELLS) ? "playercreateinfo_spell_custom" : "playercreateinfo_spell";
+         QueryResult result = WorldDatabase.PQuery("SELECT racemask, classmask, Spell FROM %s", tableName.c_str());
  
          if (!result)
          {
***************
*** 3406,3446 ****
              do
              {
                  Field* fields = result->Fetch();
  
-                 uint32 current_race = fields[0].GetUInt8();
-                 if (current_race >= MAX_RACES)
                  {
-                     TC_LOG_ERROR(LOG_FILTER_SQL, "Wrong race %u in `playercreateinfo_spell` table, ignoring.", current_race);
                      continue;
                  }
  
-                 uint32 current_class = fields[1].GetUInt8();
-                 if (current_class >= MAX_CLASSES)
                  {
-                     TC_LOG_ERROR(LOG_FILTER_SQL, "Wrong class %u in `playercreateinfo_spell` table, ignoring.", current_class);
                      continue;
                  }
  
-                 if (!current_race || !current_class)
                  {
-                     uint32 min_race = current_race ? current_race : 1;
-                     uint32 max_race = current_race ? current_race + 1 : MAX_RACES;
-                     uint32 min_class = current_class ? current_class : 1;
-                     uint32 max_class = current_class ? current_class + 1 : MAX_CLASSES;
-                     for (uint32 r = min_race; r < max_race; ++r)
-                         for (uint32 c = min_class; c < max_class; ++c)
-                             if (PlayerInfo* info = _playerInfo[r][c])
-                                 info->spell.push_back(fields[2].GetUInt32());
                  }
-                 else if (PlayerInfo* info = _playerInfo[current_race][current_class])
-                     info->spell.push_back(fields[2].GetUInt32());
-                 else
-                 {
-                     TC_LOG_ERROR(LOG_FILTER_SQL, "Wrong race: %u, class: %u combination in `playercreateinfo_spell` table, ignoring.", current_race, current_class);
-                     continue;
-                 }
- 
-                 ++count;
              }
              while (result->NextRow());
  
--- 3406,3448 ----
              do
              {
                  Field* fields = result->Fetch();
+                 uint32 raceMask = fields[0].GetUInt32();
+                 uint32 classMask = fields[1].GetUInt32();
+                 uint32 spellId = fields[2].GetUInt32();
  
+                 if (raceMask != 0 && !(raceMask & RACEMASK_ALL_PLAYABLE))
                  {
+                     TC_LOG_ERROR(LOG_FILTER_SQL, "Wrong race mask %u in `playercreateinfo_spell` table, ignoring.", raceMask);
                      continue;
                  }
  
+                 if (classMask != 0 && !(classMask & CLASSMASK_ALL_PLAYABLE))
                  {
+                     TC_LOG_ERROR(LOG_FILTER_SQL, "Wrong class mask %u in `playercreateinfo_spell` table, ignoring.", classMask);
                      continue;
                  }
  
+                 for (uint32 raceIndex = RACE_HUMAN; raceIndex < MAX_RACES; ++raceIndex)
                  {
+                     if (raceMask == 0 || ((1 << (raceIndex - 1)) & raceMask))
+                     {
+                         for (uint32 classIndex = CLASS_WARRIOR; classIndex < MAX_CLASSES; ++classIndex)
+                         {
+                             if (classMask == 0 || ((1 << (classIndex - 1)) & classMask))
+                             {
+                                 if (PlayerInfo* info = _playerInfo[raceIndex][classIndex])
+                                 {
+                                     info->spell.push_back(spellId);
+                                     ++count;
+                                 }
+                                 // We need something better here, the check is not accounting for spells used by multiple races/classes but not all of them.
+                                 // Either split the masks per class, or per race, which kind of kills the point yet.
+                                 // else if (raceMask != 0 && classMask != 0)
+                                 //     TC_LOG_ERROR(LOG_FILTER_SQL, "Racemask/classmask (%u/%u) combination was found containing an invalid race/class combination (%u/%u) in `playercreateinfo_spell` (Spell %u), ignoring.", raceMask, classMask, raceIndex, classIndex, spellId);
+                             }
+                         }
+                     }
                  }
              }
              while (result->NextRow());
  
***************
*** 8100,8112 ****
      CreatureTemplate const* cInfo = GetCreatureTemplate(entry);
      if (!cInfo)
      {
-         TC_LOG_ERROR(LOG_FILTER_SQL, "Table `npc_trainer` contains an entry for a non-existing creature template (Entry: %u), ignoring", entry);
          return;
      }
  
      if (!(cInfo->npcflag & UNIT_NPC_FLAG_TRAINER))
      {
-         TC_LOG_ERROR(LOG_FILTER_SQL, "Table `npc_trainer` contains an entry for a creature template (Entry: %u) without trainer flag, ignoring", entry);
          return;
      }
  
--- 8102,8114 ----
      CreatureTemplate const* cInfo = GetCreatureTemplate(entry);
      if (!cInfo)
      {
+         TC_LOG_ERROR(LOG_FILTER_SQL, "Table `npc_trainer` contains entries for a non-existing creature template (Entry: %u), ignoring", entry);
          return;
      }
  
      if (!(cInfo->npcflag & UNIT_NPC_FLAG_TRAINER))
      {
+         TC_LOG_ERROR(LOG_FILTER_SQL, "Table `npc_trainer` contains entries for a creature template (Entry: %u) without trainer flag, ignoring", entry);
          return;
      }
  
***************
*** 8985,8988 ****
      if (!info)
          return NULL;
      return info;
- }--- 8989,8992 ----
      if (!info)
          return NULL;
      return info;
+ }
